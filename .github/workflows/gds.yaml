name: gds
on:
  push:           # run on push to any branch
  pull_request:   # also run on PRs
  workflow_dispatch: # allow manual trigger
jobs:
  gds:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build GDS
        uses: TinyTapeout/tt-gds-action@ttsky25a
        with:
          pdk: sky130
          tools-ref: ttsky25a
      - name: Upload GDS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: GDS_artifacts
          path: |
            runs/wokwi/results/final/verilog/gl/*.v
            runs/wokwi/results/final/gds/*.gds
            *.v
  precheck:
    needs: gds
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Run Tiny Tapeout Precheck
        uses: TinyTapeout/tt-gds-action/precheck@ttsky25a
        with:
          pdk: sky130
          tools-ref: ttsky25a
  gl_test:
    needs: gds
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Download GDS artifacts
        uses: actions/download-artifact@v4
        with:
          name: GDS_artifacts
          path: .
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y iverilog
          pip install cocotb
      - name: Setup gate-level netlist
        run: |
          # Look for the gate-level netlist file
          echo "=== Looking for gate-level netlist files ==="
          find . -name "*.v" -path "*/gl/*" -o -name "*netlist*.v" -o -name "user_project_wrapper.v" | head -10
          
          # Try to find the gate-level netlist
          GL_NETLIST=$(find . -name "*.v" -path "*/gl/*" | head -1)
          if [ -z "$GL_NETLIST" ]; then
            GL_NETLIST=$(find . -name "*netlist*.v" | head -1)
          fi
          if [ -z "$GL_NETLIST" ]; then
            GL_NETLIST=$(find . -name "user_project_wrapper.v" | head -1)
          fi
          
          echo "Found gate-level netlist: $GL_NETLIST"
          
          if [ -f "$GL_NETLIST" ]; then
            cp "$GL_NETLIST" test/gate_level_netlist.v
            echo "Copied gate-level netlist to test/gate_level_netlist.v"
          else
            echo "No gate-level netlist found, creating dummy file"
            echo "// Dummy gate-level netlist - replace with actual file" > test/gate_level_netlist.v
          fi
      - name: Install PDK
        run: |
          pip install volare
          # Enable the exact PDK version
          volare enable fa87f8f4bbcc7255b6f0c0fb506960f531ae2392
          # Get the actual PDK path using volare path command
          VOLARE_PDK_PATH=$(volare path fa87f8f4bbcc7255b6f0c0fb506960f531ae2392)
          echo "Volare PDK Path: $VOLARE_PDK_PATH"
          
          # Debug: Let's see what structure volare actually created
          echo "=== Exploring volare PDK structure ==="
          find $VOLARE_PDK_PATH -name "*.v" | head -10
          ls -la $VOLARE_PDK_PATH/
          
          # Look for the verilog files we need
          echo "=== Looking for sky130_fd_sc_hd verilog files ==="
          find $VOLARE_PDK_PATH -path "*sky130_fd_sc_hd*" -name "*.v" | head -5
          
          # Create the expected PDK structure
          mkdir -p dependencies/pdk/sky130A/libs.ref/sky130_fd_sc_hd/verilog
          
          # Find and copy the primitives.v file
          PRIMITIVES_FILE=$(find $VOLARE_PDK_PATH -name "primitives.v" | head -1)
          SKY130_FILE=$(find $VOLARE_PDK_PATH -name "sky130_fd_sc_hd.v" | head -1)
          
          echo "Found primitives.v at: $PRIMITIVES_FILE"
          echo "Found sky130_fd_sc_hd.v at: $SKY130_FILE"
          
          if [ -f "$PRIMITIVES_FILE" ]; then
            cp "$PRIMITIVES_FILE" dependencies/pdk/sky130A/libs.ref/sky130_fd_sc_hd/verilog/
          fi
          
          if [ -f "$SKY130_FILE" ]; then
            cp "$SKY130_FILE" dependencies/pdk/sky130A/libs.ref/sky130_fd_sc_hd/verilog/
          fi
          
          # Set PDK_ROOT to point to our dependencies directory
          PDK_ROOT_PATH=$(pwd)/dependencies/pdk
          echo "PDK_ROOT=$PDK_ROOT_PATH" >> $GITHUB_ENV
          echo "Final PDK_ROOT will be: $PDK_ROOT_PATH"
          
          # Verify the expected files exist
          ls -la $PDK_ROOT_PATH/sky130A/libs.ref/sky130_fd_sc_hd/verilog/ || echo "Verilog files not found at expected location"
      - name: Run GL test
        run: make GATES=yes -C test
        env:
          GATES: "yes"
          PDK_TYPE: "sky130"
          PDK_ROOT: ${{ env.PDK_ROOT }}
          COCOTB_RESOLVE_X: "ZEROS"
      - name: Create dummy results.xml (on failure)
        if: failure()
        run: |
          mkdir -p test
          echo "<testsuite></testsuite>" > test/results.xml
      - name: Upload test summary
        uses: test-summary/action@v2.3
        with:
          paths: test/results.xml
  viewer:
    needs: gds
    runs-on: ubuntu-24.04
    environment:
      name: github-pages
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Run Viewer
        uses: TinyTapeout/tt-gds-action/viewer@ttsky25a
        with:
          pdk: sky130
